}
ivec()
getS3method("print", logical)
getS3method("print", logical) |> is.error
getS3method("print", logical) |> is.error()
?getS3method
getS3method("print", logical, optional = T) #|> is.error()
getS3method("print", "logical", optional = T) #|> is.error()
getS3method("print", "logical", optional = T)("YES")
getS3method("print", "logical", optional = T)->kkk
exists("print.factor")
?UseMethod()
obj_print_data.ivec <- \(x,...){
class(x) <- attr(x, "var_info")$var_class
attr(x, "var_info") <- NULL
print(x,...)
}
ivec()
j <- epicalc::BP$sex |> ivec()
j
j <- ivec(iris$Sepal.Length)
j
vec_ptype_abbr("character")
vec_ptype_abbr.ivec <- function(x, ...) {
paste0("a.",attr(x, "var_info")$var_class)
}
j <- ivec(iris$Sepal.Length)
j
vec_ptype_full("character")
vec_ptype_full("ivec")
?vec_ptype_full()
vec_ptype_full(j)
vec_ptype_abbr("numver")
vec_ptype_abbr(123)
?vec_ptype()
?vec_ptype_finalise()
abbreviate("character")
vec_ptype_abbr.ivec <- function(x, ...) {
paste0("a.",abbreviate(attr(x, "var_info")$var_class))
}
vec_ptype_full.ivec <- function(x, ...) {
paste0("a.",attr(x, "var_info")$var_class)
}
j
j <- ivec(iris$Sepal.Length)
j <- c(1.0,0.5)
j <- ivec(iris$Sepal.Length)
j <- ivec(iris$Sepal.Length)
vec_ptype_abbr.ivec <- function(x, ...) {
paste0("a.",abbreviate(attr(x, "var_info")$var_class))
}
j
str(j)
j <- c(1.0,0.5)
str(j)
str(LETTERS)
str(Sys.Date())
vec_ptype_abbr.ivec <- function(x, ...) {
paste0("a.",abbreviate(attr(x, "var_info")$var_class,3))
}
j <- ivec(iris$Sepal.Length)
j
vec.name <- list(
LETTERS,
1,
0.5,
1+1i,
TRUE,
Sys.Date(),
Sys.time(),
factor("A")
)
vec.name <- list(
LETTERS,
1,
0.5,
1+1i,
TRUE,
Sys.Date(),
Sys.time(),
factor("A"),
list()
)
sapply(vec.name, vec_ptype_abbr
)
sapply(vec.name, vec_ptype_abbr)
vec.name <- list(
LETTERS,
1L,
0.5,
1+1i,
TRUE,
Sys.Date(),
Sys.time(),
factor("A"),
list(),
d
)
vec.name <- list(
LETTERS,
1L,
0.5,
1+1i,
TRUE,
Sys.Date(),
Sys.time(),
factor("A"),
list(),
d
)
vec.name <- list(
LETTERS,
1L,
0.5,
1+1i,
TRUE,
Sys.Date(),
Sys.time(),
factor("A"),
list()
)
sapply(vec.name, vec_ptype_abbr)
sapply(vec.name, \(x) class(x) |> abbreviate())
sapply(vec.name, vec_ptype_abbr)
sapply(vec.name, \(x) class(x) |> abbreviate(minlength = 3, ))
?vec_ptype_full
cat(vec_ptype_full(iris))
cat(vec_ptype_full(vec.name))
cat(vec_ptype_abbr(vec.name))
cat(vec_ptype_abbr(1:10))
cat(vec_ptype_abbr(1:10)/2)
cat(vec_ptype_abbr(1:10/2))
sapply(vec.name, class)
sapply(vec.name, vec_ptype_abbr)
sapply(vec.name, vec_ptype_abbr)
sapply(vec.name, vec_ptype_full)
getAnywhere()
getAnywhere(iris)
getAnywhere(BP)
parent.frame()
?parent.frame()
library(data.table)
data(iris)
setDT(iris)
iris[, parent.frame()]
iris[, parent.frame()]
iris[, names(parent.frame())]
$
?'$'
gsub("*.\\$","","a$545")
iris[, names(parent.frame())]
iris[, names(parent.frame())] -> j
iris[, parent.frame()] -> j
str(j)
env.profile(j)
environment(j)
k <- parent.frame()
str(k)
k
str(k)
length(k)
attributes(k)
environmentName(k)
environmentName(j)
?environmentName
globalenv()
environmentName(x)
environmentName(iris)
iris[, parent.frame(environmentName)] -> j
iris[, environmentName(parent.frame())]
with(iris, environmentName(parent.frame()))
sys.frame()
environmentName(sys.frame)
environmentName(sys.frame())
with(iris, eenvironmentName(sys.frame()))
with(iris, environmentName(sys.frame()))
with(iris, environmentName(sys.frame()))
with(iris, environmentName(environment()))
caller_env()
attributes(iris)
attributes(iris$Petal.Width)
data(epicalc::BP)
BP <- epicalc::BP
attributes(BP)
attributes(BP$sex)
attributes(BP$sbp)
attributes(BP$sbp)
attributes(BP$saltadd)
a <- 1:26
names(a) <- letters
attributes(a)
a
sloop::s3_dispatch(print(a))
names
'names<-'
attributes(BP$saltadd)
class
class
k <- attributes(BP$saltadd)
k
Sys.getenv()
attributes(Sys.Date())
getNamespace(iris)
?getNamespaceInfo
?getNamespace
getNamespace("iris")
iris[, getNamespace()]
ls()
iris[, ls()]
iris[, ls()]
BP[,ls]
BP[,ls()]
BP[,.(ls())]
BP
?ls()
myfunc <- function() {ls()}
myfunc()
getClass("character")
getClass("ivec")
getElement(iris)
# Class group
class_grouping <- function(x) {
x <- last(x)
dplyr::case_when(
x %in% c("integer", "numeric") ~ "Continuous",
x %in% c("character", "factor") ~ "Categorical",
x %in% c("Date", "POSIXt") ~ "Date & Time",
TRUE ~ x
)
}
load_all()
rm(list = c("class_grouping"))
load_all()
labelled::var_label(a) <- "hello"
attributes(a)
a
print(a)
plot(a)
var_label(iris) <- list(Petal.Length = "Length of petal", Petal.Width = "Width of Petal")
labelled::var_label(iris) <- list(Petal.Length = "Length of petal", Petal.Width = "Width of Petal")
iris
des(iris)
labelled::look_for(iris)
attributes(iris)
attributes(iris$Sepal.Length)
attributes(iris$Petal.Length)
#' @export
aware_class <- \(x,...){
self <- list(
original = class(x),
original_group = class_grouping(a_class)
)
self
}
load_all()
load_all()
aware_class(iris)
load_all()
aware_class(iris)
load_all()
aware_class(iris)
aware_class(iris)
aware_class(iris$Sepal.Length)
aware_class(iris$Sepal.Length) -> j
j
#' @export
aware_class <- \(x,...){
self <- list(
original = class(x),
original_group = class_grouping(x)
)
return(self)
}
load_all
load_all()
aware_class(iris$Sepal.Length)
load_all()
aware_class(iris$Sepal.Length)
aware_size(iris$Sepal.Length)
aware_size(airquality$Ozone)
aware_size(na.omit(airquality$Ozone))
sapply(vec.name, vec_ptype_abbr)
vec.name <- list(
LETTERS,
1L,
0.5,
1+1i,
TRUE,
Sys.Date(),
Sys.time(),
factor("A"),
list()
)
sapply(vec.name, vec_ptype_abbr)
load_all()
aware_class(iris$Sepal.Length)
vec_ptype_abbr
vec_ptype_abbr_dispatch
aware_class(iris$Sepal.Length)
BP <- epicalc::BP
aware_class(BP$sex)
aware_class(BP$sex)
IQR(BP$sbp)
?IQR(BP$sbp)
summary(BP$sbp)
summary(BP$saltadd)
summary(BP$birthdate)
#'
#'
#'
#'
aware_summary <-
summary(BP$birthdate) |> str()
#'
#'
#'
#'
aware_summary <-
summary(BP$birthdate) |> class()
summary(BP$birthdate) |> class()
summary(BP$birthdate) |> attributes()
table(A = 5, B ="Hello")
summary(BP$birthdate,BP$sex) |> attributes()
summary(BP$birthdate,BP$sex)
summary(BP$sbp,BP$sex) |> attributes()
summary(BP$sbp,BP$sex)
table(A = 5, B ="Hello")
table(A = 5, B ="Hello", c = "125")
?table
as.table(A = 5, B ="Hello", c = "125")
summary(BP$sbp)
summary(BP$sbp) |> c()
summary(BP$sbp) |> c() |> class()
summary(BP$birthdate) |> c() |> class()
summary(BP$birthdate) |> c()
j <- summary(BP$birthdate) |> c() #|> class()
j <- summary(BP$birthdate) |> c() #|> class()
names(j)
vecc <- 123
attr(vecc, "test") <- j
vecc
#'
#'
#'
#'
#aware_summary <-
Summary.numeric_version
summary.default
is.numeric(1L)
is.double(1L)
shapiro.test(1:50001)
shapiro.test(1:5001)
quantile(BP$birthdate)
quantile(BP$birthdate, type = 7)
quantile(BP$sbp)
quantile(BP$sbp, names = c(1:5))
?shapiro.test
try(1 > 1)
try(shapiro.test(1))
?try
try(shapiro.test(1), silent = T)
try(shapiro.test(1), silent = T) %>% str*
try(shapiro.test(1), silent = T) %>% str()
try(shapiro.test(1), silent = T) |> str()
shapiro.test(airquality$Ozone)
shapiro.test(na.omit(airquality$Ozone))
c(1:5000,NA)
c(1:5000,NA) |> shapiro.test()
c(1:5000,NA,NA) |> shapiro.test()
c(1:5001,NA,NA) |> shapiro.test()
c(1:2,NA,NA) |> shapiro.test()
shapiro.test
length(NA)
length(NULL)
NA == 1
ifelse(NA == 1, "GH","Npo")
epicalc::summ(BP$sbp)
epicalc::summ(airquality$Ozone)
airquality
epicalc::tableGlm(lm(Ozone~Wind, data = airquality))
?epicalc::tableGlm
names(airquality)
epicalc::tableStack(dataFrame = airquality, vars = Ozone:Day, by = "none")
shapiro.qqnorm(airquality$Ozone)
shapiro.test(airquality$Ozone)
epicalc::tableStack(dataFrame = airquality, vars = Ozone:Day, by = "none")
names(airquality)
?switch
swit(c(1:5),
'1' =,
'2' = print("hello"),
NA = print("Bye"))
switch(c(1:5),
'1' =,
'2' = print("hello"),
NA = print("Bye"))
switch(EXPR = c(1:5),
'1' =,
'2' = print("hello"),
NA = print("Bye"))
switch(EXPR = c(1:5),
'1' =print("hello"),
'2' = print("hello"),
NA = print("Bye"))
j <- 1:5
switch(EXPR = j,
'1' =print("hello"),
'2' = print("hello"),
NA = print("Bye"))
switch(EXPR = j,
1 = print("hello"),
2 = print("hello"),
3 = print("Bye"))
switch(EXPR = j,
1 = print("hello"),
2 = print("hello"),
3 = print("Bye"))
switch(EXPR = j,
print("hello"),
print("hello"),
print("Bye"))
j <- 1:3
switch(EXPR = j,
print("hello"),
print("hello"),
print("Bye"))
switch(j,
print("hello"),
print("hello"),
print("Bye"))
switch(3,
print("hello"),
print("hello"),
print("Bye"))
switch(4,
print("hello"),
print("hello"),
print("Bye"))
normality <- list(
norm_p = NA,
norm_dist = NULL
)
rm(normality)
kkk <- list
with(kkk, hello <- 5)
with(kkk, hello = 5)
kkk
kkk <- list()
with(kkk, hello = 5)
with(kkk, hello <- 5)
kkk
sum(1:5)*c(1, >5)
sum(1:5)
'>'
'>'(1,2)
?quantile
use_package("zeallot")
setNames(j, letters)
setNames(j, letters[1:3])
summary.default(BP$sbp)
c(setNames(j, letters[1:3]), 55)
load_all()
aware_summary(airquality$Ozone)
load_all()
aware_summary(airquality$Ozone)
load_all()
aware_summary(airquality$Ozone)
aware_summary.numeric(airquality$Ozone)
aware_summary.numeric <- \(x, normality.test = TRUE, ...){
#Summarize base on normality
assertive.types::assert_is_a_bool(normality.test)
x <- na.omit(x)
n <- length(x)
# --
norm_p <- NA
norm_dist <- NULL
if (normality.test && n >= 3L && n <= 5000L) {
norm_p <- shapiro.test(x)$p.value
norm_dist <- norm_p >= 0.05
}
if (norm_dist == TRUE) {
summ <- c(Mean = mean(x), SD = sd(x))
} else if (norm_dist == TRUE) {
summ <- setNames(
quantile(x, probs = c(0.5,0.25,0.75)),
c("Median","Q1","Q3")
)
} else {
summ <- c(
Mean = mean(x),
SD = sd(x),
setNames(quantile(x, probs = c(0.5,0.25,0.75)),
c("Median","Q1","Q3")
)
)
}
list(
norm_p = norm_p,
norm_dist = norm_dist,
summ = summ
)
}
load_all()
aware_summary(airquality$Ozone)
aware_summary.default(airquality$Ozone)
aware_summary.numeric(airquality$Ozone)
load_all()
aware_summary.numeric(airquality$Ozone)
aware_summary(airquality$Ozone)
methods("aware_summary")
load_all()
document()
