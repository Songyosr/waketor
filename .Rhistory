git init
use_mit_license()
document()
file.edit(".Rprofile")
use_mit_license()
use_package(c("vctrs"))
use_package(c("dplyr"))
use_package(c("utils","tibbles","stats"))
use_package(c("utils","tibble","stats"))
use_package(c("utils"))
use_package(c("stats"))
use_package(c("tibble"))
document()
library(vctrs)
new_percent <- function(x = double()) {
vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(seq(0, 1, length.out = 4), NA))
x
?vec_assert
is.vector(1:5)
is.vector(data.frame(1:5))
use_package("assertthat")
use_package("assertive.type")
use_package("assertive.types")
use_package("assertive.bases")
use_package("assertive.proporties")
use_package("assertive.properties")
use_package("assertive.base")
?assertive.types::assert_is_s3_primitive_generic()
new_percent <- function(x = double()) {
assert::assert(is.vector(x), "'x' is not vector")
vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(seq(0, 1, length.out = 4), NA))
is.vector(c(seq(0, 1, length.out = 4))
is.vector(c(seq(0, 1, length.out = 4)))
is.vector(c(seq(0, 1, length.out = 4)))
new_percent <- function(x = double()) {
assert::assert(is.vector(x), "'x' is not vector")
vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
new_percent(c(seq(0, 1, length.out = 4), NA))
x <- new_percent(0.1)
?assert
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
assert::assert(is.vector(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(0.1)
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
assertthat::assert_that(is.vector(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(0.1)
x
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
assertthat::assert_that(is.vector(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(0.1)
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
assertthat::assert_that(is.double(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(0.1)
x <- new_percent(c(0.1,0.5))
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
assertthat::assert_that(all(is.double(x)), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
x <- x
assertthat::assert_that(is.double(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
x
rm(x)
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
x <- x
assertthat::assert_that(is.double(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
x
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
x <- x
assertthat::assert_that(is.vector(x), "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
t <- is.vector(x)
assertthat::assert_that(t, "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
x
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
t <- is.vector(x)
assert::assert(t, "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
new_percent <- function(x = double()) {
print(x)
print(is.vector(x))
t <- is.vector(x)
assert::assert(TRUE, "'x' is not vector")
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
x
new_percent <- function(x = double()) {
assertive.types::assert_is_numeric(x)
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
x
assertive.types::assert_is_numeric
is.vector()
is.vector(1:10)
?assertthat::is.scalar()
see_if(is.scalar("a"))
see_if(is.scalar(1:10))
assertthat::is.scalar(c(5:10))
new_percent <- function(x = double()) {
assertthat::assertthat(class(x) %in% c("character", "complex", "integer", "logical", "numeric"))
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
new_percent <- function(x = double()) {
assertthat::assert_that(class(x) %in% c("character", "complex", "integer", "logical", "numeric"))
#vec_assert(x, double())
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(c(0.1,0.5))
x
x <- new_percent(factor(0.1,0.5))
styler:::style_active_file()
styler:::style_active_file()
new_percent <- function(x = double()) {
assertthat::assert_that(
any(
class(x) %in% c(
"character", "complex", "integer",
"logical", "numeric", "Date",
"factor", "POSXit"
)
)
)
new_vctr(x, class = "vctrs_percent")
}
x <- new_percent(factor(0.1, 0.5))
x
x <- new_percent(factor(0.1, 0.5))
x <- new_percent(factor(c(0.1, 0.5)))
x
new_vece <- function(x = double()) {
assertthat::assert_that(
any(
class(x) %in% c(
"character", "complex", "integer",
"logical", "numeric", "Date",
"factor", "POSXit"
)
)
)
new_vctr(x, class = "vece")
}
?vec_cast
load_all()
load_all()
vec_cast
?vec_castt
?vec_cast
?vector()
?vec_ptype
vec_ptype(factor(c("A","B")))
vctrs::vec_ptype(factor(c("A","B")))
vctrs::vec_ptype(factor(Sys.Date))
vctrs::vec_ptype(Sys.Date()))
vctrs::vec_ptype(Sys.Date())
vec_ptype(data.frame(1,2))
vctrs::vec_ptype(data.frame(1,2))
vctrs::vec_ptype_show(iris)
vctrs::vec_ptype(iris)
# informative vect --------------------------------------------------------
var_info_df <- data.frame(character(0L),character(0L))
var_info_df
# informative vect --------------------------------------------------------
var_info_df <- data.frame(A = character(),B = character())
var_info_df
load_all()
# informative vect --------------------------------------------------------
var_info_df <- data.frame(
var_name = character(),
var_lab <- character(),
var_length <- integer(),
var_na <- integer(),
var_class <- character(),
var_group <- character()
)
# informative vect --------------------------------------------------------
var_info_df <- data.frame(
var_name = character(),
var_lab <- character(),
var_length <- integer(),
var_na <- integer(),
var_class <- character(),
var_group <- character()
)
# informative vect --------------------------------------------------------
var_info_df <- data.frame(
var_name = character(),
var_lab = character(),
var_length = integer(),
var_na = integer(),
var_class = character(),
var_group = character()
)
vectrs::vec_cast(var_info_df)
library(vctrs)
vctrs::vec_cast(var_info_df)
vctrs::vec_cast_show(var_info_df)
?vec_ptype
vec_ptype(var_info_df)
new_ivec <- function(x = vector(), var_info = data.frame()) {
assertthat::assert_that(
any(
class(x) %in% c(
"character", "complex", "integer",
"logical", "numeric", "Date",
"factor", "POSXit"
)
)
)
assertthat::are_equal(vec_ptype(var_info),vec_ptype(var_info_df))
new_vctr(x, class = "ivec")
}
get_info <- \(x, var_name = NULL){
df <- data.frame(
var_name = var_name %||% deparse(substitute(x)),
var_lab = attr(x, "label") %||% "",
var_length - length(x),
var_na = sum(is.na(x)),
var_class = class(x),
var_group = class_grouping(x),
)
df
}
get_info(iris$Sepal.Length)
get_info(iris$Sepal.Length)
get_info <- \(x, var_name = NULL){
df <- data.frame(
var_name = var_name %||% deparse(substitute(x)),
var_lab = attr(x, "label") %||% "",
#var_length = length(x),
var_na = sum(is.na(x)),
var_class = class(x),
var_group = class_grouping(x),
)
df
}
get_info(iris$Sepal.Length)
get_info <- \(x, var_name = NULL){
df <- data.frame(
var_name = var_name %||% deparse(substitute(x)),
var_lab = attr(x, "label") %||% "",
#var_length = length(x),
var_na = sum(is.na(x)),
var_class = class(x),
var_group = class_grouping(x),
)
df
}
get_info(iris$Sepal.Length)
load_all
load_all()
get_info <- \(x, var_name = NULL){
df <- data.frame(
var_name = var_name %||% deparse(substitute(x)),
var_lab = attr(x, "label") %||% "",
#var_length = length(x),
var_na = sum(is.na(x)),
var_class = class(x),
var_group = class_grouping(x),
)
df
}
get_info(iris$Sepal.Length)
get_info <- \(x, var_name = NULL){
df <- data.frame(
var_name = var_name %||% deparse(substitute(x)),
var_lab = attr(x, "label") %||% "",
var_length = length(x),
var_na = sum(is.na(x)),
var_class = class(x),
var_group = class_grouping(x)
)
df
}
get_info(iris$Sepal.Length)
?last
load_all()
get_info <- \(x, var_name = NULL){
df <- data.frame(
var_name = var_name %||% deparse(substitute(x)),
var_lab = attr(x, "label") %||% "",
var_length = length(x),
var_na = sum(is.na(x)),
var_class = class(x),
var_group = class_grouping(x)
)
df
}
get_info(iris$Sepal.Length)
ivec <- function(x){
assertthat::assert_that(
any(
class(x) %in% c(
"character", "complex", "integer",
"logical", "numeric", "Date",
"factor", "POSXit"
)
)
)
new_vece(x, get_info(x))
}
ivec(iris)
ivec(iris)
ivec <- function(x){
assertthat::assert_that(
any(
class(x) %in% c(
"character", "complex", "integer",
"logical", "numeric", "Date",
"factor", "POSXit"
)
),
msg = "'x' should only be a vector"
)
new_vece(x, get_info(x))
}
ivec(iris)
ivec(iris$Sepal.Length)
ivec <- function(x){
assertthat::assert_that(
any(
class(x) %in% c(
"character", "complex", "integer",
"logical", "numeric", "Date",
"factor", "POSXit"
)
),
msg = "'x' should only be a vector"
)
new_ivec(x, get_info(x))
}
ivec(iris$Sepal.Length)
